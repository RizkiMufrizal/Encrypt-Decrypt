package org.rizki.mufrizal.generate;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.rizki.mufrizal.generate.helper.AES256CBC;
import org.rizki.mufrizal.generate.helper.AES256GCM;
import org.rizki.mufrizal.generate.helper.RSAOAEPWithSHA256;

/**
 *
 * @author Rizki Mufrizal
 */
public class App extends javax.swing.JFrame {

    String privateKeyString = null;
    String publicKeyString = null;

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        secretKeyEncrypt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextEncryptAES = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        encryptAES = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chiperTextEncryptAES = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        secretKeyDecrypt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        chiperTextDecryptAES = new javax.swing.JTextArea();
        decryptAES = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        plainTextDecryptAES = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        uploadPublicKey = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        publicKeyName = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        plainTextEncryptRSA = new javax.swing.JTextArea();
        encryptRSA = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        chiperTextEncryptRSA = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        uploadPrivateKey = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        privateKeyName = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        chiperTextDecryptRSA = new javax.swing.JTextArea();
        decryptRSA = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        plainTextDecryptRSA = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        plainTextEncryptAESCbc = new javax.swing.JTextArea();
        secretKeyEncryptCbc = new javax.swing.JTextField();
        encryptAESCbc = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        chiperTextEncryptAESCbc = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        chiperTextDecryptAESCbc = new javax.swing.JTextArea();
        secretKeyDecryptCbc = new javax.swing.JTextField();
        decryptAESCbc = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        plainTextDecryptAESCbc = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Secret Key");

        plainTextEncryptAES.setColumns(20);
        plainTextEncryptAES.setRows(5);
        jScrollPane1.setViewportView(plainTextEncryptAES);

        jLabel2.setText("Plain Text");

        encryptAES.setText("Process");
        encryptAES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptAESActionPerformed(evt);
            }
        });

        chiperTextEncryptAES.setColumns(20);
        chiperTextEncryptAES.setRows(5);
        jScrollPane2.setViewportView(chiperTextEncryptAES);

        jLabel3.setText("Chiper Text");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(encryptAES)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(8, 8, 8)
                                .addComponent(secretKeyEncrypt))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(secretKeyEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(encryptAES)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("AES 256 GCM Encrypt", jPanel1);

        jLabel4.setText("Secret Key");

        jLabel5.setText("Chiper Text");

        chiperTextDecryptAES.setColumns(20);
        chiperTextDecryptAES.setRows(5);
        jScrollPane3.setViewportView(chiperTextDecryptAES);

        decryptAES.setText("Process");
        decryptAES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptAESActionPerformed(evt);
            }
        });

        jLabel6.setText("Plain Text");

        plainTextDecryptAES.setColumns(20);
        plainTextDecryptAES.setRows(5);
        jScrollPane4.setViewportView(plainTextDecryptAES);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(decryptAES)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                            .addComponent(secretKeyDecrypt)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(secretKeyDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(decryptAES)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("AES 256 GCM Decrypt", jPanel2);

        uploadPublicKey.setText("Upload Public Key");
        uploadPublicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPublicKeyActionPerformed(evt);
            }
        });

        jLabel7.setText("Plain Text");

        plainTextEncryptRSA.setColumns(20);
        plainTextEncryptRSA.setRows(5);
        jScrollPane5.setViewportView(plainTextEncryptRSA);

        encryptRSA.setText("Process");
        encryptRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptRSAActionPerformed(evt);
            }
        });

        jLabel8.setText("Cipher Text");

        chiperTextEncryptRSA.setColumns(20);
        chiperTextEncryptRSA.setRows(5);
        jScrollPane6.setViewportView(chiperTextEncryptRSA);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(uploadPublicKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(publicKeyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(61, 61, 61)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(encryptRSA)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane6))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(publicKeyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(uploadPublicKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encryptRSA)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("RSA OAEP With SHA256 Encrypt", jPanel3);

        uploadPrivateKey.setText("Upload Private Key");
        uploadPrivateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPrivateKeyActionPerformed(evt);
            }
        });

        jLabel9.setText("Cipher Text");

        chiperTextDecryptRSA.setColumns(20);
        chiperTextDecryptRSA.setRows(5);
        jScrollPane7.setViewportView(chiperTextDecryptRSA);

        decryptRSA.setText("Process");
        decryptRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptRSAActionPerformed(evt);
            }
        });

        jLabel10.setText("Plain Text");

        plainTextDecryptRSA.setColumns(20);
        plainTextDecryptRSA.setRows(5);
        jScrollPane8.setViewportView(plainTextDecryptRSA);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(uploadPrivateKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(privateKeyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(decryptRSA)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane8))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(privateKeyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(uploadPrivateKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(decryptRSA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("RSA OAEP With SHA256 Decrypt", jPanel4);

        jLabel11.setText("Secret Key");

        jLabel12.setText("Plain Text");

        plainTextEncryptAESCbc.setColumns(20);
        plainTextEncryptAESCbc.setRows(5);
        jScrollPane9.setViewportView(plainTextEncryptAESCbc);

        encryptAESCbc.setText("Process");
        encryptAESCbc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptAESCbcActionPerformed(evt);
            }
        });

        chiperTextEncryptAESCbc.setColumns(20);
        chiperTextEncryptAESCbc.setRows(5);
        jScrollPane10.setViewportView(chiperTextEncryptAESCbc);

        jLabel13.setText("Chiper Text");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(8, 8, 8)
                                .addComponent(secretKeyEncryptCbc))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(13, 13, 13)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(encryptAESCbc)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane10)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(secretKeyEncryptCbc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(encryptAESCbc)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("AES 256 CBC Encrypt", jPanel5);

        jLabel14.setText("Secret Key");

        jLabel15.setText("Chiper Text");

        chiperTextDecryptAESCbc.setColumns(20);
        chiperTextDecryptAESCbc.setRows(5);
        jScrollPane11.setViewportView(chiperTextDecryptAESCbc);

        decryptAESCbc.setText("Process");
        decryptAESCbc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptAESCbcActionPerformed(evt);
            }
        });

        plainTextDecryptAESCbc.setColumns(20);
        plainTextDecryptAESCbc.setRows(5);
        jScrollPane12.setViewportView(plainTextDecryptAESCbc);

        jLabel16.setText("Plain Text");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel14))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel15)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(decryptAESCbc)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                            .addComponent(secretKeyDecryptCbc)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane12)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(secretKeyDecryptCbc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(decryptAESCbc)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("AES 256 CBC Decrypt", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void encryptAESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptAESActionPerformed
        String plain = this.plainTextEncryptAES.getText();
        String secret = this.secretKeyEncrypt.getText();
        String result = AES256GCM.encrypt(plain, secret);
        this.chiperTextEncryptAES.setText(result);
    }//GEN-LAST:event_encryptAESActionPerformed

    private void decryptAESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptAESActionPerformed
        String chiper = this.chiperTextDecryptAES.getText();
        String secret = this.secretKeyDecrypt.getText();
        String result = AES256GCM.decrypt(chiper, secret);
        this.plainTextDecryptAES.setText(result);
    }//GEN-LAST:event_decryptAESActionPerformed

    private void encryptRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptRSAActionPerformed
        if (this.publicKeyString == null) {
            JOptionPane.showMessageDialog(null, "Public Key Belum Dipilih", "Error Message", JOptionPane.ERROR_MESSAGE);
        } else if (this.publicKeyString.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Public Key Kosong", "Error Message", JOptionPane.ERROR_MESSAGE);
        } else {
            String plain = this.plainTextEncryptRSA.getText();
            String result = RSAOAEPWithSHA256.encrypt(plain, this.publicKeyString);
            this.chiperTextEncryptRSA.setText(result);
        }
    }//GEN-LAST:event_encryptRSAActionPerformed

    private void uploadPublicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPublicKeyActionPerformed
        JFileChooser jFileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = jFileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            BufferedReader bufferedReader = null;
            try {
                File file = jFileChooser.getSelectedFile();
                StringBuilder stringBuilder = new StringBuilder();
                bufferedReader = new BufferedReader(new FileReader(file));
                String line = bufferedReader.readLine();
                while (line != null) {
                    stringBuilder.append(line);
                    stringBuilder.append("\n");
                    line = bufferedReader.readLine();
                }
                publicKeyString = stringBuilder.toString();
                this.publicKeyName.setText(jFileChooser.getSelectedFile().getName());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    bufferedReader.close();
                } catch (IOException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_uploadPublicKeyActionPerformed

    private void uploadPrivateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPrivateKeyActionPerformed
        JFileChooser jFileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = jFileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            BufferedReader bufferedReader = null;
            try {
                File file = jFileChooser.getSelectedFile();
                StringBuilder stringBuilder = new StringBuilder();
                bufferedReader = new BufferedReader(new FileReader(file));
                String line = bufferedReader.readLine();
                while (line != null) {
                    stringBuilder.append(line);
                    stringBuilder.append("\n");
                    line = bufferedReader.readLine();
                }
                privateKeyString = stringBuilder.toString();
                this.privateKeyName.setText(jFileChooser.getSelectedFile().getName());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    bufferedReader.close();
                } catch (IOException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_uploadPrivateKeyActionPerformed

    private void decryptRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptRSAActionPerformed
        if (this.privateKeyString == null) {
            JOptionPane.showMessageDialog(null, "Private Key Belum Dipilih", "Error Message", JOptionPane.ERROR_MESSAGE);
        } else if (this.privateKeyString.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Private Key Kosong", "Error Message", JOptionPane.ERROR_MESSAGE);
        } else {
            String cipher = this.chiperTextDecryptRSA.getText();
            String result = RSAOAEPWithSHA256.decrypt(cipher, this.privateKeyString);
            this.plainTextDecryptRSA.setText(result);
        }
    }//GEN-LAST:event_decryptRSAActionPerformed

    private void encryptAESCbcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptAESCbcActionPerformed
        try {
            String plain = this.plainTextEncryptAESCbc.getText();
            String secret = this.secretKeyEncryptCbc.getText();
            if (secret.length() > 16) {
                JOptionPane.showMessageDialog(null, "Secret key tidak boleh lebih dari 16 karakter", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else if (secret.length() < 16) {
                JOptionPane.showMessageDialog(null, "Secret key tidak boleh kurang dari 16 karakter", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                String result = AES256CBC.encrypt(plain, secret);
                this.chiperTextEncryptAESCbc.setText(result);
            }
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException | IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_encryptAESCbcActionPerformed

    private void decryptAESCbcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptAESCbcActionPerformed
        try {
            String plain = this.chiperTextDecryptAESCbc.getText();
            String secret = this.secretKeyDecryptCbc.getText();
            if (secret.length() > 16) {
                JOptionPane.showMessageDialog(null, "Secret key tidak boleh lebih dari 16 karakter", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else if (secret.length() < 16) {
                JOptionPane.showMessageDialog(null, "Secret key tidak boleh kurang dari 16 karakter", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                String result = AES256CBC.decrypt(plain, secret);
                this.plainTextDecryptAESCbc.setText(result);
            }
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException  ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_decryptAESCbcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new App().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chiperTextDecryptAES;
    private javax.swing.JTextArea chiperTextDecryptAESCbc;
    private javax.swing.JTextArea chiperTextDecryptRSA;
    private javax.swing.JTextArea chiperTextEncryptAES;
    private javax.swing.JTextArea chiperTextEncryptAESCbc;
    private javax.swing.JTextArea chiperTextEncryptRSA;
    private javax.swing.JButton decryptAES;
    private javax.swing.JButton decryptAESCbc;
    private javax.swing.JButton decryptRSA;
    private javax.swing.JButton encryptAES;
    private javax.swing.JButton encryptAESCbc;
    private javax.swing.JButton encryptRSA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea plainTextDecryptAES;
    private javax.swing.JTextArea plainTextDecryptAESCbc;
    private javax.swing.JTextArea plainTextDecryptRSA;
    private javax.swing.JTextArea plainTextEncryptAES;
    private javax.swing.JTextArea plainTextEncryptAESCbc;
    private javax.swing.JTextArea plainTextEncryptRSA;
    private javax.swing.JLabel privateKeyName;
    private javax.swing.JLabel publicKeyName;
    private javax.swing.JTextField secretKeyDecrypt;
    private javax.swing.JTextField secretKeyDecryptCbc;
    private javax.swing.JTextField secretKeyEncrypt;
    private javax.swing.JTextField secretKeyEncryptCbc;
    private javax.swing.JButton uploadPrivateKey;
    private javax.swing.JButton uploadPublicKey;
    // End of variables declaration//GEN-END:variables
}
